name: Wahmbulance

on:
  workflow_dispatch: # lets you run a build from the UI
  push:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_NAME: Wahmbulance
  BUILD_TYPE: Release
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DISPLAY: :0 # linux pluginval needs this
  CMAKE_BUILD_PARALLEL_LEVEL: 4 # Use up to 3 cpus to build juceaide, etc
  HOMEBREW_NO_INSTALL_CLEANUP: 1

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
        - name: Linux
          os: ubuntu-22.04
          extension: .zip

        - name: macOS
          os: macos-12
          extension: .dmg

        - name: Windows
          os: windows-2022
          extension: .exe


    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup python
      uses: actions/setup-python@v4.7.1
      id: cp310
      with:
        python-version: 3.11.7
        update-environment: true

    - name: Install poetry
      run: |
        ${{ steps.cp310.outputs.python-path }} -m pip install poetry==1.6.1

    - name: Configure poetry
      run: |
        python -m poetry install

    - name: Set up Clang
      if: ${{ matrix.name != 'macOS' }}
      uses: egor-tensin/setup-clang@v1

    - name: Bootstrap systems
      run: |
        poetry run invoke bootstrap

    - name: Setup xvfb display
      if: runner.os == 'Linux'
      # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
      run: |
        sudo /usr/bin/Xvfb $DISPLAY &

    - name: Setup Environment Variables
      shell: bash
      run: |
        VERSION=$(cat VERSION)
        echo "ARTIFACTS_PATH=build/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
        echo "VST3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3" >> $GITHUB_ENV
        echo "AU_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AU/${{ env.PROJECT_NAME }}.component" >> $GITHUB_ENV
        echo "AUV3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/AUv3/${{ env.PROJECT_NAME }}.appex" >> $GITHUB_ENV
        echo "PRODUCT_NAME=${{ env.PROJECT_NAME }}-$VERSION-${{ matrix.name }}" >> $GITHUB_ENV

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: v2-${{ matrix.os }}-${{ matrix.type }}

    - name: Build
      shell: bash
      run: poetry run invoke build -j4 --build-type ${{ env.BUILD_TYPE }}

    - name: Test
      shell: bash
      run: poetry run invoke test

    - name: Pluginval
      shell: bash
      run: |
        poetry run invoke pluginval

    - name: Add Custom Icons (macOS)
      if: ${{ matrix.name == 'macOS' }}
      working-directory: build
      run: |
        # add the icns as its own icon resource (meta!)
        sips -i ../packaging/wahmbulance.icns

        # Grab the resource, put in tempfile
        DeRez -only icns ../packaging/wahmbulance.icns > /tmp/icons

        # Stuff the resource into the strange Icon? file's resource fork
        Rez -a /tmp/icons -o ${{ env.VST3_PATH }}/Icon$'\r'

        # Set custom icon attribute
        SetFile -a C ${{ env.VST3_PATH }}

    - name: Create DMG, Notarize and Staple (macOS)
      if: ${{ matrix.name == 'macOS' }}
      run: |
        npm install -g appdmg
        mkdir -p packaging/dmg

        # Create directories for the dmg symlinks
        sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/Components && sudo mkdir -m 755 -p /Library/Audio/Plug-Ins/VST3
        ln -s /Library/Audio/Plug-Ins/Components "packaging/dmg/Your Mac's Component folder"
        ln -s /Library/Audio/Plug-Ins/VST3 "packaging/dmg/Your Mac's VST3 folder"
        mv "${{ env.ARTIFACTS_PATH }}/VST3/${{ env.PROJECT_NAME }}.vst3" packaging/dmg
        # mv "${{ env.ARTIFACTS_PATH }}/AU/${{ env.PROJECT_NAME }}.component" packaging/dmg

        # Run appdmg to create the .dmg
        cd packaging && appdmg dmg.json ${{ env.PRODUCT_NAME}}.dmg
        # codesign -s "${{ secrets.DEVELOPER_ID_APPLICATION}}" --timestamp -i com.cwoodall.wahmbulance --force ${{ env.PRODUCT_NAME }}.dmg
        # xcrun notarytool submit ${{ env.PRODUCT_NAME }}.dmg --apple-id ${{ secrets.NOTARIZATION_USERNAME }} --password ${{ secrets.NOTARIZATION_PASSWORD }} --team-id ${{ secrets.TEAM_ID }} --wait
        # xcrun stapler staple ${{ env.PRODUCT_NAME }}.dmg

    - name: Zip
      if: ${{ matrix.name == 'Linux' }}
      working-directory: ${{ env.ARTIFACTS_PATH }}
      run: 7z a -tzip ${{ env.PRODUCT_NAME }}.zip .

    - name: Generate Installer and Sign with EV cert on Azure (Windows)
      if: ${{ matrix.name == 'Windows' }}
      shell: bash
      run: |
        iscc "packaging\installer.iss"
        mv "packaging/Output/${{ env.PRODUCT_NAME }}.exe" "${{ env.ARTIFACTS_PATH }}/"
        # dotnet tool install --global AzureSignTool
        # AzureSignTool sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.digicert.com -v "${{ env.ARTIFACTS_PATH }}/${{ env.PRODUCT_NAME }}.exe"

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT_NAME }}.${{ matrix.extension }}
        path: packaging/${{ env.PRODUCT_NAME }}.${{ matrix.extension }}


  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: Get Artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        # download-artifact puts these files in their own dirs...
        # Using globs sidesteps having to pass the version around
        files: |
          */*.exe
          */*.zip
          */*.dmg
