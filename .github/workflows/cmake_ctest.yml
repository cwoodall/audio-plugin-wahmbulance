name: Wahmbulance

on:
  workflow_dispatch: # lets you run a build from the UI
  push:

# When pushing new commits, cancel any running builds on that branch
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  PROJECT_NAME: Wahmbulance
  BUILD_TYPE: Release
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DISPLAY: :0 # linux pluginval needs this
  CMAKE_BUILD_PARALLEL_LEVEL: 4 # Use up to 3 cpus to build juceaide, etc
  HOMEBREW_NO_INSTALL_CLEANUP: 1

# jobs are run in paralell on different machines
# all steps run in series
jobs:
  build_and_test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # show all errors for each platform (vs. cancel jobs on error)
      matrix:
        include:
        - name: Linux
          os: ubuntu-22.04
          extension: .zip

        - name: macOS
          os: macos-12
          extension: .dmg

        - name: Windows
          os: windows-2022
          extension: .exe


    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: true

    - name: Setup python
      uses: actions/setup-python@v4.7.1
      id: cp310
      with:
        python-version: 3.11.7
        update-environment: true

    - name: Install poetry
      run: |
        ${{ steps.cp310.outputs.python-path }} -m pip install poetry==1.6.1

    - name: Configure poetry
      run: |
        python -m poetry install

    - name: Set up Clang
      if: ${{ matrix.name != 'macOS' }}
      uses: egor-tensin/setup-clang@v1

    - name: Bootstrap systems
      run: |
        poetry run invoke bootstrap

    - name: Setup xvfb display
      if: runner.os == 'Linux'
      # Thanks to McMartin & co https://forum.juce.com/t/list-of-juce-dependencies-under-linux/15121/44
      run: |
        sudo /usr/bin/Xvfb $DISPLAY &

    - name: Setup Environment Variables
      shell: bash
      run: |
        VERSION=$(cat VERSION)
        echo "ARTIFACTS_PATH=build/${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}" >> $GITHUB_ENV
        echo "VST3_PATH=${{ env.PROJECT_NAME }}_artefacts/${{ env.BUILD_TYPE }}/VST3/${{ env.PROJECT_NAME }}.vst3" >> $GITHUB_ENV
        echo "PRODUCT_NAME=${{ env.PROJECT_NAME }}-$VERSION-${{ matrix.name }}" >> $GITHUB_ENV

    - name: ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: v2-${{ matrix.os }}-${{ matrix.type }}

    - name: Build
      shell: bash
      run: poetry run invoke build -j4 --build-type ${{ env.BUILD_TYPE }}

    - name: Test
      shell: bash
      run: poetry run invoke test

    - name: Pluginval
      shell: bash
      run: |
        poetry run invoke pluginval

    - name: Package
      shell: bash
      run: |
        poetry run invoke package --build-type ${{ env.BUILD_TYPE }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT_NAME }}.${{ matrix.extension }}
        path: packaging/${{ env.PRODUCT_NAME }}.${{ matrix.extension }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build_and_test

    steps:
    - name: Get Artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        # download-artifact puts these files in their own dirs...
        # Using globs sidesteps having to pass the version around
        files: |
          */*.exe
          */*.zip
          */*.dmg
